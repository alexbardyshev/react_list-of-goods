{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","state","isStarted","isReversed","sortType","NONE","startRenderingList","setState","sortByLength","LENGTH","sortByAlpabet","ALPHABET","reverse","reset","this","visibleGoods","goods","sort","good1","good2","localeCompare","length","getReorderedGoods","className","type","onClick","classNames","map","good","React","Component","ReactDOM","render","document","getElementById"],"mappings":"iKAkBKA,E,kGAbCC,EAAkB,CACtB,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,YAAAA,E,oBAAAA,E,iBAAAA,M,KAwCE,IAAME,EAAb,4MACEC,MAAQ,CACNC,WAAW,EACXC,YAAY,EACZC,SAAUN,EAASO,MAJvB,EAOEC,mBAAqB,WACnB,EAAKC,SAAS,CAAEL,WAAW,KAR/B,EAWEM,aAAe,WACb,EAAKD,SAAS,CAAEH,SAAUN,EAASW,UAZvC,EAeEC,cAAgB,WACd,EAAKH,SAAS,CAAEH,SAAUN,EAASa,YAhBvC,EAmBEC,QAAU,WACR,EAAKL,UAAS,SAAAN,GAAK,MAAK,CACtBE,YAAaF,EAAME,gBArBzB,EAyBEU,MAAQ,WACN,EAAKN,SAAS,CACZJ,YAAY,EACZC,SAAUN,EAASO,QA5BzB,4CAgCE,WACE,MAA4CS,KAAKb,MAAzCC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,WAAYC,EAA/B,EAA+BA,SACzBW,EAnEV,SACEC,EACAZ,EACAD,GAEA,IAAMY,EAAY,YAAOC,GAmBzB,OAjBAD,EAAaE,MAAK,SAACC,EAAOC,GACxB,OAAQf,GACN,KAAKN,EAASa,SACZ,OAAOO,EAAME,cAAcD,GAE7B,KAAKrB,EAASW,OACZ,OAAOS,EAAMG,OAASF,EAAME,OAE9B,QACE,OAAO,MAITlB,GACFY,EAAaH,UAGRG,EA2CgBO,CACnBvB,EACAK,EACAD,GAGF,OACE,qBAAKoB,UAAU,MAAf,SACIrB,EAUE,qCACE,sBAAKqB,UAAU,UAAf,UACE,wBACEC,KAAK,SACLC,QAASX,KAAKJ,cACda,UAAWG,IACT,MAAO,CACL,sBACAZ,KAAKb,MAAMG,WAAaN,EAASa,UAChC,CACD,cACAG,KAAKb,MAAMG,WAAaN,EAASa,WATvC,iCAgBA,wBACEa,KAAK,SACLC,SACEX,KAAKD,MACLC,KAAKN,cAEPe,UAAWG,IACT,MAAO,CACL,sBACAZ,KAAKb,MAAMG,WAAaN,EAASW,QAChC,CACD,cACAK,KAAKb,MAAMG,WAAaN,EAASW,SAZvC,4BAmBA,wBACEe,KAAK,SACLC,SACEX,KAAKD,MACLC,KAAKF,SACPW,UAAU,0BALZ,qBAUA,wBACEC,KAAK,SACLC,QAASX,KAAKD,MACdU,UAAU,0BAHZ,sBASF,oBAAIA,UAAU,aAAd,SACGR,EAAaY,KAAI,SAAAC,GAAI,OACpB,oBACEL,UAAU,4BADZ,SAIGK,GAFIA,WApEb,wBACEJ,KAAK,SACLC,QAASX,KAAKR,mBACdiB,UAAU,kBAHZ,yBA5CZ,GAAyBM,IAAMC,WCvD/BC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.11745211.chunk.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React from 'react';\nimport classNames from 'classnames';\nimport './App.css';\n\nconst goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE = 'None',\n  ALPHABET = 'Alphabet',\n  LENGTH = 'length',\n}\n\n// Use this function in the render method\nfunction getReorderedGoods(\n  goods: string[],\n  sortType: SortType,\n  isReversed: boolean,\n) {\n  const visibleGoods = [...goods];\n\n  visibleGoods.sort((good1, good2) => {\n    switch (sortType) {\n      case SortType.ALPHABET:\n        return good1.localeCompare(good2);\n\n      case SortType.LENGTH:\n        return good1.length - good2.length;\n\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\ntype State = {\n  isStarted: boolean,\n  isReversed: boolean,\n  sortType: SortType,\n};\n\nexport class App extends React.Component<{}, State> {\n  state = {\n    isStarted: false,\n    isReversed: false,\n    sortType: SortType.NONE,\n  };\n\n  startRenderingList = () => {\n    this.setState({ isStarted: true });\n  };\n\n  sortByLength = () => {\n    this.setState({ sortType: SortType.LENGTH });\n  };\n\n  sortByAlpabet = () => {\n    this.setState({ sortType: SortType.ALPHABET });\n  };\n\n  reverse = () => {\n    this.setState(state => ({\n      isReversed: !state.isReversed,\n    }));\n  };\n\n  reset = () => {\n    this.setState({\n      isReversed: false,\n      sortType: SortType.NONE,\n    });\n  };\n\n  render(): React.ReactNode {\n    const { isStarted, isReversed, sortType } = this.state;\n    const visibleGoods = getReorderedGoods(\n      goodsFromServer,\n      sortType,\n      isReversed,\n    );\n\n    return (\n      <div className=\"App\">\n        {!isStarted\n          ? (\n            <button\n              type=\"button\"\n              onClick={this.startRenderingList}\n              className=\"btn btn-success\"\n            >\n              Start\n            </button>\n          ) : (\n            <>\n              <div className=\"buttons\">\n                <button\n                  type=\"button\"\n                  onClick={this.sortByAlpabet}\n                  className={classNames(\n                    'btn', {\n                      'btn-outline-success':\n                      this.state.sortType !== SortType.ALPHABET,\n                    }, {\n                      'btn-success':\n                      this.state.sortType === SortType.ALPHABET,\n                    },\n                  )}\n                >\n                  Sort alphabetically\n                </button>\n\n                <button\n                  type=\"button\"\n                  onClick={(\n                    this.reset,\n                    this.sortByLength\n                  )}\n                  className={classNames(\n                    'btn', {\n                      'btn-outline-success':\n                      this.state.sortType !== SortType.LENGTH,\n                    }, {\n                      'btn-success':\n                      this.state.sortType === SortType.LENGTH,\n                    },\n                  )}\n                >\n                  Sort by length\n                </button>\n\n                <button\n                  type=\"button\"\n                  onClick={(\n                    this.reset,\n                    this.reverse)}\n                  className=\"btn btn-outline-success\"\n                >\n                  Reverse\n                </button>\n\n                <button\n                  type=\"button\"\n                  onClick={this.reset}\n                  className=\"btn btn-outline-success\"\n                >\n                  Reset\n                </button>\n              </div>\n\n              <ul className=\"list-group\">\n                {visibleGoods.map(good => (\n                  <li\n                    className=\"list-item list-group-item\"\n                    key={good}\n                  >\n                    {good}\n                  </li>\n                ))}\n              </ul>\n            </>\n          )}\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}